// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Gender {
  Male
  Female
  Other
}

// This model represents a patient in the healthcare system.
// It includes fields for authentication and a one-to-one relationship with the PatientProfile model.
model User {
  id           String   @id @default(cuid())
  email        String   @unique
  password     String?
  role         Role     @default(PATIENT)
  profileSetup Boolean  @default(false)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  doctorProfile       DoctorProfile?  @relation("DoctorToDoctorProfile")
  patientProfile      PatientProfile? @relation("PatientToPatientProfile")
  doctorAppointments  Appointment[]   @relation("DoctorAppointments")
  patientAppointments Appointment[]   @relation("PatientAppointments")
  sentMessages        Message[]       @relation("MessageSender")
  receivedMessages    Message[]       @relation("MessageReceiver")


  // Reviews
  patientReviews Review[] @relation("PatientReviews") // reviews written by this user as patient
  doctorReviews  Review[] @relation("DoctorReviews")  // reviews received by this user as doctor
}

// This enum defines the roles a user can have in the healthcare system.
enum Role {
  PATIENT
  DOCTOR
  ADMIN
}

// This model represents a patient's profile in the healthcare system.
model PatientProfile {
  id                     String   @id @default(cuid())
  fullName               String
  gender                 String   @default("Male")
  phone                  String   @unique
  dob                    DateTime
  imageUrl               String?
  address                String?
  bloodGroup             String?
  emergencyContactNumber String?
  medicalHistory         String?
  currentMedications     String?
  createdAt              DateTime @default(now())
  updatedAt              DateTime @updatedAt

  patientId String @unique
  patient   User   @relation("PatientToPatientProfile", fields: [patientId], references: [id])
}

// This model represents a doctor's profile in the healthcare system.
model DoctorProfile {
  id              String   @id @default(cuid())
  phone           String   @unique
  fullName        String
  imageUrl        String?
  address         String?
  specialization  String?
  experience      Int?
  consultationFee Float?
  licenseNumber   String   @unique
  licenseDocument String // URL/path to PDF/Image
  verified        Boolean  @default(false)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  doctorId        String   @unique
  bio             String?
  education       String?
  certifications  String?
  languages       String?



  // Relations
  doctor          User     @relation("DoctorToDoctorProfile", fields: [doctorId], references: [id])
}

// This model represents an appointment between a patient and a doctor.
model Appointment {
  id        String   @id @default(cuid())
  patientId String
  doctorId  String
  date      DateTime
  timeSlot  String
  reason    String?
  status    String   @default("PENDING")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  patient      User          @relation("PatientAppointments", fields: [patientId], references: [id])
  doctor       User          @relation("DoctorAppointments", fields: [doctorId], references: [id])
  prescription Prescription?

  messages Message[]
}

// This model represents a message sent between Doctors and Patient, typically in the context of an appointment.
model Message {
  id            String      @id @default(cuid())
  content       String
  senderId      String
  receiverId    String
  appointment   Appointment @relation(fields: [appointmentId], references: [id])
  appointmentId String
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  sender   User @relation("MessageSender", fields: [senderId], references: [id])
  receiver User @relation("MessageReceiver", fields: [receiverId], references: [id])
}

// This model represents a prescription given to a patient during an appointment.
model Prescription {
  id            String      @id @default(cuid())
  appointment   Appointment @relation(fields: [appointmentId], references: [id])
  appointmentId String      @unique

  medicines    Medicine[] // One prescription â†’ many medicines
  publicNotes  String?
  privateNotes String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// This model represents a medicine prescribed in a prescription.
model Medicine {
  id             String       @id @default(cuid())
  prescription   Prescription @relation(fields: [prescriptionId], references: [id])
  prescriptionId String

  name         String
  dosage       String
  instructions String?

  createdAt DateTime @default(now())
}

//This model represent the review given by the patient to the doctor

model Review {
  id        String   @id @default(cuid())
  rating    Int
  comment   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  patientId String
  doctorId  String

  patient User @relation("PatientReviews", fields: [patientId], references: [id])
  doctor  User @relation("DoctorReviews", fields: [doctorId], references: [id])

  @@unique([patientId, doctorId])
}
